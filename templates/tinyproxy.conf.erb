### MANAGED BY PUPPET
##
## tinyproxy.conf -- tinyproxy daemon configuration file
##
## This example tinyproxy.conf file contains example settings
## with explanations in comments. For decriptions of all
## parameters, see the tinproxy.conf(5) manual page.
##

#
# User/Group: This allows you to set the user and group that will be
# used for tinyproxy after the initial binding to the port has been done
# as the root user. Either the user or group name or the UID or GID
# number may be used.
#
User <%= @user %>
Group <%= @group %>

#
# Port: Specify the port which tinyproxy will listen on.  Please note
# that should you choose to run on a port lower than 1024 you will need
# to start tinyproxy using root.
#
Port <%= @port %>

#
# Listen: If you have multiple interfaces this allows you to bind to
# only one. If this is commented out, tinyproxy will bind to all
# interfaces present.
#
<%- if @listen != :undef -%>
Listen <%= @listen %>
<%- end -%>

#
# Bind: This allows you to specify which interface will be used for
# outgoing connections.  This is useful for multi-home'd machines where
# you want all traffic to appear outgoing from one particular interface.
#
<%- if @bind != :undef -%>
Bind <%= @bind %>
<%- end -%>

#
# BindSame: If enabled, tinyproxy will bind the outgoing connection to the
# ip address of the incoming connection.
#
<%- if @bindsame != :undef -%>
BindSame <%= @bindsame %>
<%- end -%>

#
# Timeout: The maximum number of seconds of inactivity a connection is
# allowed to have before it is closed by tinyproxy.
#
Timeout <%= @connection_timeout %>

#
# ErrorFile: Defines the HTML file to send when a given HTTP error
# occurs.  You will probably need to customize the location to your
# particular install.  The usual locations to check are:
#   /usr/local/share/tinyproxy
#   /usr/share/tinyproxy
#   /etc/tinyproxy
#
<%- if @errorfiles.length > 0 && @errorfiles.is_a?(Hash)
@errorfiles.each_pair { |k,v| -%>
ErrorFile <%= k %> "<%= v %>"
<%- }
end -%>

#
# DefaultErrorFile: The HTML file that gets sent if there is no
# HTML file defined with an ErrorFile keyword for the HTTP error
# that has occured.
#
DefaultErrorFile "<%= @defaulterrorfile %>"

#
# StatHost: This configures the host name or IP address that is treated
# as the stat host: Whenever a request for this host is received,
# Tinyproxy will return an internal statistics page instead of
# forwarding the request to that host.  The default value of StatHost is
# tinyproxy.stats.
#
<%- if @stathost != :undef -%>
StatHost "<%= @stathost %>"
<%- end -%>

#
# StatFile: The HTML file that gets sent when a request is made
# for the stathost.  If this file doesn't exist a basic page is
# hardcoded in tinyproxy.
#
StatFile "<%= @statfile %>"

#
# Syslog: Tell tinyproxy to use syslog instead of a logfile.  This
# option must not be enabled if the Logfile directive is being used.
# These two directives are mutually exclusive.
#
<%- if @syslog != :undef && ![TrueClass,FalseClass].index(@syslog.class).nil?
if @syslog == true -%>
Syslog On
<%- elsif @syslog == false -%>
Syslog Off

#
# Logfile: Allows you to specify the location where information should
# be logged to.  If you would prefer to log to syslog, then disable this
# and enable the Syslog directive.  These directives are mutually
# exclusive.
#
Logfile "<%= @logfile %>"
<%- end
end -%>

#
# LogLevel: 
#
# Set the logging level. Allowed settings are:
#   Critical    (least verbose)
#   Error
#   Warning
#   Notice
#   Connect     (to log connections without Info's noise)
#   Info        (most verbose)
#
# The LogLevel logs from the set level and above. For example, if the
# LogLevel was set to Warning, then all log messages from Warning to
# Critical would be output, but Notice and below would be suppressed.
#
LogLevel <%= @log_level %>

#
# PidFile: Write the PID of the main tinyproxy thread to this file so it
# can be used for signalling purposes.
#
PidFile "<%= @pidfile %>"

#
# XTinyproxy: Tell Tinyproxy to include the X-Tinyproxy header, which
# contains the client's IP address.
#
<%- if @xtinyproxy != :undef && ![TrueClass,FalseClass].index(@xtinyproxy.class).nil?
if @xtinyproxy == true -%>
XTinyproxy Yes
<%- elsif @xtinyproxy == false -%>
XTinyproxy No
<%- end
end -%>

#
# MaxClients: This is the absolute highest number of threads which will
# be created. In other words, only MaxClients number of clients can be
# connected at the same time.
#
MaxClients <%= @maxclients %>

#
# MinSpareServers/MaxSpareServers: These settings set the upper and
# lower limit for the number of spare servers which should be available.
#
# If the number of spare servers falls below MinSpareServers then new
# server processes will be spawned.  If the number of servers exceeds
# MaxSpareServers then the extras will be killed off.
#
MinSpareServers <%= @minspareservers %>
MaxSpareServers <%= @maxspareservers %>

#
# StartServers: The number of servers to start initially.
#
StartServers <%= @startservers %>

#
# MaxRequestsPerChild: The number of connections a thread will handle
# before it is killed. In practise this should be set to 0, which
# disables thread reaping. If you do notice problems with memory
# leakage, then set this to something like 10000.
#
MaxRequestsPerChild <%= @maxrequestsperchild %>

#
# Allow: Customization of authorization controls. If there are any
# access control keywords then the default action is to DENY. Otherwise,
# the default action is ALLOW.
#
# The order of the controls are important. All incoming connections are
# tested against the controls based on order.
#
<%- if @allow.length > 0 && @allow.is_a?(Array)
@allow.each { |a| -%>
Allow <%= a %>
<%- }
end -%>

#
# ViaProxyName: The "Via" header is required by the HTTP RFC, but using
# the real host name is a security concern.  If the following directive
# is enabled, the string supplied will be used as the host name in the
# Via header; otherwise, the server's host name will be used.
#
ViaProxyName "<%= @viaproxyname %>"

#
# DisableViaHeader: When this is set to yes, Tinyproxy does NOT add
# the Via header to the requests. This virtually puts Tinyproxy into
# stealth mode. Note that RFC 2616 requires proxies to set the Via
# header, so by enabling this option, you break compliance.
# Don't disable the Via header unless you know what you are doing...
#
<%- if @disableviaheader != :undef && ![TrueClass,FalseClass].index(@disableviaheader.class).nil?
if @disableviaheader == true -%>
DisableViaHeader Yes
<%- elsif @disableviaheader == false -%>
DisableViaHeader No
<%- end
end -%>

#
# Filter: This allows you to specify the location of the filter file.
#
<%- if @filter != :undef -%>
Filter "<%= @filter %>"
<%- end -%>

#
# FilterURLs: Filter based on URLs rather than domains.
#
<%- if @filterurls != :undef && ![TrueClass,FalseClass].index(@filterurls.class).nil?
if @filterurls == true -%>
FilterURLs On
<%- elsif @filterurls == false -%>
FilterURLs Off
<%- end
end -%>

#
# FilterExtended: Use POSIX Extended regular expressions rather than
# basic.
#
<%- if @filterextended != :undef && ![TrueClass,FalseClass].index(@filterextended.class).nil?
if @filterextended == true -%>
FilterExtended On
<%- elsif @filterextended == false -%>
FilterExtended Off
<%- end
end -%>

#
# FilterCaseSensitive: Use case sensitive regular expressions.
#
<%- if @filtercasesensitive != :undef && ![TrueClass,FalseClass].index(@filtercasesensitive.class).nil?
if @filtercasesensitive == true -%>
FilterCaseSensitive On
<%- elsif @filtercasesensitive == false -%>
FilterCaseSensitive Off
<%- end
end -%>

#
# FilterDefaultDeny: Change the default policy of the filtering system.
# If this directive is commented out, or is set to "No" then the default
# policy is to allow everything which is not specifically denied by the
# filter file.
#
# However, by setting this directive to "Yes" the default policy becomes
# to deny everything which is _not_ specifically allowed by the filter
# file.
#
<%- if @filterdefaultdeny != :undef && ![TrueClass,FalseClass].index(@filterdefaultdeny.class).nil?
if @filterdefaultdeny == true -%>
FilterDefaultDeny Yes
<%- elsif @filterdefaultdeny == false -%>
FilterDefaultDeny No
<%- end
end -%>

#
# Anonymous: If an Anonymous keyword is present, then anonymous proxying
# is enabled.  The headers listed are allowed through, while all others
# are denied. If no Anonymous keyword is present, then all headers are
# allowed through.  You must include quotes around the headers.
#
# Most sites require cookies to be enabled for them to work correctly, so
# you will need to allow Cookies through if you access those sites.
#
<%- if @anonymous.is_a?(Array)
@anonymous.each { |h| -%>
Anonymous "<%= h %>"
<%- }
end -%>


#
# ConnectPort: This is a list of ports allowed by tinyproxy when the
# CONNECT method is used.  To disable the CONNECT method altogether, set
# the value to 0.  If no ConnectPort line is found, all ports are
# allowed (which is not very secure.)
#
<%- if @connectport.is_a?(Array)
@connectport.each { |p| -%>
ConnectPort <%= p %>
<%- }
end -%>

#
# When using tinyproxy as a reverse proxy, it is STRONGLY recommended
# that the normal proxy is turned off by uncommenting the next directive.
#
<%- if @reverseonly != :undef && ![TrueClass,FalseClass].index(@reverseonly.class).nil?
if @reverseonly == true -%>
ReverseOnly Yes
<%- elsif @reverseonly == false -%>
ReverseOnly No
<%- end
end -%>

#
# Use a cookie to track reverse proxy mappings. If you need to reverse
# proxy sites which have absolute links you must uncomment this.
#
<%- if @reversemagic != :undef && ![TrueClass,FalseClass].index(@reversemagic.class).nil?
if @reversemagic == true -%>
ReverseMagic Yes
<%- elsif @reversemagic == false -%>
ReverseMagic No
<%- end
end -%>

#
# The URL that's used to access this reverse proxy. The URL is used to
# rewrite HTTP redirects so that they won't escape the proxy. If you
# have a chain of reverse proxies, you'll need to put the outermost
# URL here (the address which the end user types into his/her browser).
#
# If not set then no rewriting occurs.
#
<%- if @reversebaseurl != :undef -%>
ReverseBaseURL "<%= @reversebaseurl %>"
<%- end -%>
